id: fetch_weather_data
namespace: zoomcamp

variables:
  file: "transformed_data.csv"
  gcs_file: "gs://{{ kv('GCP_BUCKET_NAME') }}/{{ vars.file }}"
  table: "{{ kv('GCP_DATASET') }}._hko"
  data: "{{ outputs.parse_json.outputFiles['transformed_data.csv'] }}"

tasks:
  - id: set_label
    type: io.kestra.plugin.core.execution.Labels
    labels:
      file: "{{ render(vars.file) }}"
      data_type: "weather"

  - id: fetch_data
    type: io.kestra.plugin.core.http.Request
    uri: "https://data.weather.gov.hk/weatherAPI/opendata/weather.php?dataType=rhrread&lang=en"
    method: GET

  - id: parse_json
    type: io.kestra.plugin.scripts.python.Script
    inputFiles:
      data.json: "{{ outputs.fetch_data.body }}"
    beforeCommands:
      - pip install pandas
    outputFiles:
      - transformed_data.csv
    script: |
      import json
      from datetime import datetime
      import csv
      import pandas as pd

      # Load the JSON data
      with open("data.json", "r") as file:
          data = json.load(file)

      temp_data = data.get("temperature", {}).get("data", [])
      temp_records = []
      for record in temp_data:
          temp_records.append({
              "parameter": "temperature",
              "place": record.get("place"),
              "value": record.get("value"),
              "unit": record.get("unit"),
              "record_time": data.get("temperature", {}).get("recordTime")
          })

      # Process humidity data
      humid_data = data.get("humidity", {}).get("data", [])
      humid_records = []
      for record in humid_data:
          humid_records.append({
              "parameter": "humidity",
              "place": record.get("place"),
              "value": record.get("value"),
              "unit": record.get("unit"),
              "record_time": data.get("humidity", {}).get("recordTime")
          })

      # Combine all records
      all_records = temp_records + humid_records
      df = pd.DataFrame(all_records)
      # Convert recordTime to a valid timestamp format


      # Save the DataFrame to a CSV file
      df.to_csv('transformed_data.csv', index=False)

      # Output the DataFrame as a string for logging
      print("Temperature Data with Record Time:")
      print(df)


  - id: upload_to_gcs
    type: io.kestra.plugin.gcp.gcs.Upload
    from: "{{ outputs.parse_json.outputFiles['transformed_data.csv'] }}"
    to: "{{ render(vars.gcs_file) }}"
    serviceAccount: "{{kv('GCP_CREDS')}}"

  - id: create_weather_table
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
      CREATE TABLE IF NOT EXISTS `{{ kv('GCP_PROJECT_ID') }}.{{ kv('GCP_DATASET') }}.weather_data`
      (
        parameter STRING,
        place STRING,
        value INT64,
        unit STRING,
        record_time TIMESTAMP

      )
      PARTITION BY DATE(record_time)
      CLUSTER BY parameter, place;

  - id: load_weather_data
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
      CREATE OR REPLACE EXTERNAL TABLE `{{ kv('GCP_PROJECT_ID') }}.{{ render(vars.table) }}_ext`
      (
        parameter STRING,
        place STRING,
        value INT64,
        unit STRING,
        record_time TIMESTAMP
      )
      OPTIONS (
          format = 'CSV',
          uris = ['{{ render(vars.gcs_file) }}'],
          skip_leading_rows = 1,
          ignore_unknown_values = TRUE
      );

  - id: merge_weather_data
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
      MERGE INTO `{{ kv('GCP_PROJECT_ID') }}.{{ kv('GCP_DATASET') }}.weather_data` T
      USING `{{ kv('GCP_PROJECT_ID') }}.{{ render(vars.table) }}_ext` S
      ON T.record_time = S.record_time AND T.place = S.place
      WHEN NOT MATCHED THEN
        INSERT (parameter, place, value, unit, record_time)
        VALUES (S.parameter, S.place, S.value, S.unit, S.record_time);

  - id: purge_files
    type: io.kestra.plugin.core.storage.PurgeCurrentExecutionFiles
    description: Purge temporary files after processing.
    disabled: false

pluginDefaults:
  - type: io.kestra.plugin.gcp
    values:
      serviceAccount: "{{kv('GCP_CREDS')}}"
      projectId: "{{ kv('GCP_PROJECT_ID') }}"
      location: "{{ kv('GCP_LOCATION') }}"
      bucket: "{{ kv('GCP_BUCKET_NAME') }}"

triggers:
  - id: schedule
    type: io.kestra.plugin.core.trigger.Schedule
    cron: "*/5 * * * *"  # Check every 5 minutes